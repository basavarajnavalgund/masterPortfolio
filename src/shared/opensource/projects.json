{"data":[{"id":"MDEwOlJlcG9zaXRvcnkyODc5MzAxODg=","name":"tracking-with-Unscented-Kalman-Filter","createdAt":"2020-08-16T11:27:11Z","url":"https://github.com/basavarajnavalgund/tracking-with-Unscented-Kalman-Filter","description":"Object (e.g Pedestrian, biker, vehicles) tracking by Unscented Kalman Filter (UKF), with fused data from both lidar and radar sensors.","isFork":false,"languages":[{"name":"Python","iconifyClass":"logos-python"},{"name":"Jupyter Notebook","iconifyClass":"logos-jupyter"}]},{"id":"MDEwOlJlcG9zaXRvcnkyODc5MjM4Mjc=","name":"tracking-with-Extended-Kalman-Filter","createdAt":"2020-08-16T10:44:23Z","url":"https://github.com/basavarajnavalgund/tracking-with-Extended-Kalman-Filter","description":"Object (e.g Pedestrian, vehicles) tracking by Extended Kalman Filter (EKF), with fused data from both lidar and radar sensors.","isFork":false,"languages":[{"name":"Python","iconifyClass":"logos-python"}]},{"id":"MDEwOlJlcG9zaXRvcnkyODc5MzkzNjI=","name":"vehicle-localization","createdAt":"2020-08-16T12:27:52Z","url":"https://github.com/basavarajnavalgund/vehicle-localization","description":"Implemented a C++ particle filter for real-time vehicle localization with only current visual observations and a map.","isFork":false,"languages":[]},{"id":"MDEwOlJlcG9zaXRvcnkyODc5MzcwNTE=","name":"path_planning","createdAt":"2020-08-16T12:13:22Z","url":"https://github.com/basavarajnavalgund/path_planning","description":"Implemented a simple real-time path planner in C++ to navigate a car around a simulated highway scenario","isFork":false,"languages":[{"name":"Python","iconifyClass":"logos-python"},{"name":"JavaScript","iconifyClass":"logos-javascript"},{"name":"CSS","iconifyClass":"logos-css-3"}]},{"id":"MDEwOlJlcG9zaXRvcnkyODc5NTM1NTc=","name":"Workplace-Service-Robot","createdAt":"2020-08-16T13:55:34Z","url":"https://github.com/basavarajnavalgund/Workplace-Service-Robot","description":"Automated Guided Vehicle (AGV), a holonomic drive with 4 mecanum-wheels. It autonomously maps an environment, localizes itself, and navigate to pick-up and drop-off objects in a simulated environment.","isFork":false,"languages":[{"name":"Python","iconifyClass":"logos-python"}]},{"id":"MDEwOlJlcG9zaXRvcnkyODc5NDEyODA=","name":"Model-Predictive-Control","createdAt":"2020-08-16T12:39:45Z","url":"https://github.com/basavarajnavalgund/Model-Predictive-Control","description":"This project is to use Model Predictive Control (MPC) to drive a car in a game simulator. The server provides reference waypoints (yellow line in the demo video) via websocket, and we use MPC to compute steering and throttle commands to drive the car. The solution must be robust to 100ms latency, since it might encounter in real-world application.","isFork":false,"languages":[{"name":"Python","iconifyClass":"logos-python"},{"name":"JavaScript","iconifyClass":"logos-javascript"},{"name":"CSS","iconifyClass":"logos-css-3"}]}]}